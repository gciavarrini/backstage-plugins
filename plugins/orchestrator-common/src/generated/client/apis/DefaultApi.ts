/* tslint:disable */
/* eslint-disable */
/**
 * Orchestrator plugin
 * API to interact with orchestrator plugin
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssessedProcessInstanceDTO,
  ErrorResponse,
  ExecuteWorkflowRequestDTO,
  ExecuteWorkflowResponseDTO,
  ProcessInstanceListResultDTO,
  WorkflowDTO,
  WorkflowDataDTO,
  WorkflowOverviewDTO,
  WorkflowOverviewListResultDTO,
  WorkflowRunStatusDTO,
} from '../models/index';
import {
    AssessedProcessInstanceDTOFromJSON,
    AssessedProcessInstanceDTOToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExecuteWorkflowRequestDTOFromJSON,
    ExecuteWorkflowRequestDTOToJSON,
    ExecuteWorkflowResponseDTOFromJSON,
    ExecuteWorkflowResponseDTOToJSON,
    ProcessInstanceListResultDTOFromJSON,
    ProcessInstanceListResultDTOToJSON,
    WorkflowDTOFromJSON,
    WorkflowDTOToJSON,
    WorkflowDataDTOFromJSON,
    WorkflowDataDTOToJSON,
    WorkflowOverviewDTOFromJSON,
    WorkflowOverviewDTOToJSON,
    WorkflowOverviewListResultDTOFromJSON,
    WorkflowOverviewListResultDTOToJSON,
    WorkflowRunStatusDTOFromJSON,
    WorkflowRunStatusDTOToJSON,
} from '../models/index';

export interface AbortWorkflowRequest {
    instanceId: string;
}

export interface ExecuteWorkflowRequest {
    workflowId: string;
    executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO;
}

export interface GetInstanceByIdRequest {
    instanceId: string;
    includeAssessment?: boolean;
}

export interface GetInstancesRequest {
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderDirection?: string;
}

export interface GetWorkflowByIdRequest {
    workflowId: string;
}

export interface GetWorkflowOverviewByIdRequest {
    workflowId: string;
}

export interface GetWorkflowResultsRequest {
    instanceId: string;
}

export interface GetWorkflowSourceByIdRequest {
    workflowId: string;
}

export interface GetWorkflowsOverviewRequest {
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderDirection?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Aborts a workflow instance identified by the provided instanceId.
     * Abort a workflow instance
     */
    async abortWorkflowRaw(requestParameters: AbortWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling abortWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/instances/{instanceId}/abort`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Aborts a workflow instance identified by the provided instanceId.
     * Abort a workflow instance
     */
    async abortWorkflow(requestParameters: AbortWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.abortWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a workflow
     */
    async executeWorkflowRaw(requestParameters: ExecuteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecuteWorkflowResponseDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling executeWorkflow.');
        }

        if (requestParameters.executeWorkflowRequestDTO === null || requestParameters.executeWorkflowRequestDTO === undefined) {
            throw new runtime.RequiredError('executeWorkflowRequestDTO','Required parameter requestParameters.executeWorkflowRequestDTO was null or undefined when calling executeWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/workflows/{workflowId}/execute`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExecuteWorkflowRequestDTOToJSON(requestParameters.executeWorkflowRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExecuteWorkflowResponseDTOFromJSON(jsonValue));
    }

    /**
     * Execute a workflow
     */
    async executeWorkflow(requestParameters: ExecuteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecuteWorkflowResponseDTO> {
        const response = await this.executeWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Workflow Instance by ID
     */
    async getInstanceByIdRaw(requestParameters: GetInstanceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssessedProcessInstanceDTO>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling getInstanceById.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAssessment !== undefined) {
            queryParameters['includeAssessment'] = requestParameters.includeAssessment;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/instances/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssessedProcessInstanceDTOFromJSON(jsonValue));
    }

    /**
     * Get Workflow Instance by ID
     */
    async getInstanceById(requestParameters: GetInstanceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssessedProcessInstanceDTO> {
        const response = await this.getInstanceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an array of instances
     * Get instances
     */
    async getInstancesRaw(requestParameters: GetInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessInstanceListResultDTO>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderDirection !== undefined) {
            queryParameters['orderDirection'] = requestParameters.orderDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessInstanceListResultDTOFromJSON(jsonValue));
    }

    /**
     * Retrieve an array of instances
     * Get instances
     */
    async getInstances(requestParameters: GetInstancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessInstanceListResultDTO> {
        const response = await this.getInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a workflow by ID
     */
    async getWorkflowByIdRaw(requestParameters: GetWorkflowByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDTOFromJSON(jsonValue));
    }

    /**
     * Get a workflow by ID
     */
    async getWorkflowById(requestParameters: GetWorkflowByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDTO> {
        const response = await this.getWorkflowByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a workflow overview by ID
     */
    async getWorkflowOverviewByIdRaw(requestParameters: GetWorkflowOverviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowOverviewDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowOverviewById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/{workflowId}/overview`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowOverviewDTOFromJSON(jsonValue));
    }

    /**
     * Get a workflow overview by ID
     */
    async getWorkflowOverviewById(requestParameters: GetWorkflowOverviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowOverviewDTO> {
        const response = await this.getWorkflowOverviewByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get workflow results
     */
    async getWorkflowResultsRaw(requestParameters: GetWorkflowResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDataDTO>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling getWorkflowResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/instances/{instanceId}/results`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDataDTOFromJSON(jsonValue));
    }

    /**
     * Get workflow results
     */
    async getWorkflowResults(requestParameters: GetWorkflowResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDataDTO> {
        const response = await this.getWorkflowResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a workflow source by ID
     */
    async getWorkflowSourceByIdRaw(requestParameters: GetWorkflowSourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowSourceById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/{workflowId}/source`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get a workflow source by ID
     */
    async getWorkflowSourceById(requestParameters: GetWorkflowSourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getWorkflowSourceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an array of workflow statuses
     * Get workflow status list
     */
    async getWorkflowStatusesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowRunStatusDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/instances/statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowRunStatusDTOFromJSON));
    }

    /**
     * Retrieve an array of workflow statuses
     * Get workflow status list
     */
    async getWorkflowStatuses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowRunStatusDTO>> {
        const response = await this.getWorkflowStatusesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of workflow overviews
     */
    async getWorkflowsOverviewRaw(requestParameters: GetWorkflowsOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowOverviewListResultDTO>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderDirection !== undefined) {
            queryParameters['orderDirection'] = requestParameters.orderDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/workflows/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowOverviewListResultDTOFromJSON(jsonValue));
    }

    /**
     * Get a list of workflow overviews
     */
    async getWorkflowsOverview(requestParameters: GetWorkflowsOverviewRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowOverviewListResultDTO> {
        const response = await this.getWorkflowsOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
